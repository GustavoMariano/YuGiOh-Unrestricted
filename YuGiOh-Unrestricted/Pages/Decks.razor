@page "/decks"
@inject AppState App
@inject IDeckService DecksSvc
@inject NavigationManager Nav

<h3>Your Decks</h3>

@if (App.UserId == Guid.Empty)
{
    <p>Faça login primeiro. <a href="/login">Login</a></p>
}
else if (decks == null)
{
    <p>Loading...</p>
}
else
{
    <div style="display:flex; gap:12px; flex-wrap:wrap;">
        @foreach (var d in decks)
        {
            <div style="border:1px solid #666; padding:10px; width:260px;">
                <strong>@d.Name</strong> (<span>@d.Cards.Sum(c => c.Count)</span>/50)
                <div><button @onclick="() => Open(d.Id)">Open</button></div>
            </div>
        }
        @if (decks.Count < 3)
        {
            <div><button @onclick="Create">Create new deck</button></div>
        }
    </div>
}

@code {
    private List<YuGiOh_Unrestricted.Core.Models.Deck>? decks;

    protected override async Task OnInitializedAsync()
    {
        if (App.UserId != Guid.Empty)
            decks = await DecksSvc.GetUserDecksAsync(App.UserId);
    }

    private async Task Create()
    {
        var d = await DecksSvc.CreateDeckAsync(App.UserId, $"Deck {decks!.Count + 1}");
        Nav.NavigateTo($"/deckbuilder/{d.Id}");
    }

    private void Open(Guid id) => Nav.NavigateTo($"/deckbuilder/{id}");
}
