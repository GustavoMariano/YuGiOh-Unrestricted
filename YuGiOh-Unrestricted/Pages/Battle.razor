@page "/battle/{Code?}"
@page "/battle"
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.SignalR.Client
@using YuGiOh_Unrestricted.Core.Models
@inject NavigationManager Nav
@inject AppState App
@inject IDeckService DecksSvc

<h3>Battle: @Code</h3>

<iframe name="silent" style="display:none;"></iframe>

@if (match is null)
{
    <div class="join-container">
        <p>Waiting for server...</p>
    </div>
}

@if (match is not null && !match.Started)
{
    var self = match.GetByConn(connectionId ?? "");

    <hr />
    <h4>Select your deck</h4>

    @if (deckOptions is null)
    {
        <p>Loading decks...</p>
    }
    else if (deckOptions.Count == 0)
    {
        <p>No decks found. <a href="/decks">Go to Decks</a></p>
    }
    else
    {
        <div style="display:flex; gap:8px; flex-wrap:wrap;">
            @foreach (var d in deckOptions)
            {
                <form method="post" target="silent" action="@($"/battle/{Code}/select-deck")">
                    <input type="hidden" name="deckId" value="@d.Id" />
                    <input type="hidden" name="userId" value="@App.UserId" />
                    <button type="submit" disabled="@(d.Total < 1 || (self?.IsReady ?? false))">@d.Name (@d.Total)</button>
                </form>
            }
        </div>
        <div style="margin-top:8px;">
            <form method="post" target="silent" action="@($"/battle/{Code}/ready")">
                <input type="hidden" name="userId" value="@App.UserId" />
                <button type="submit" disabled="@(self == null || ((self?.Deck.Count ?? 0) < 1) || self.IsReady)">@((self?.IsReady ?? false) ? "Waiting..." : "Ready")</button>
            </form>
        </div>
        <div style="margin-top:8px; font-size:12px; opacity:.75;">
            <span>You: @(((self?.IsReady ?? false) ? "Ready" : "Not ready"))</span>
            @if (match.Players.Count == 2)
            {
                var opp = match.GetOpponent(connectionId ?? "");
                <span> • Opponent: @(((opp?.IsReady ?? false) ? "Ready" : "Not ready"))</span>
            }
        </div>
    }
}

@if (match is not null && match.Started)
{
    var self = match.GetByConn(connectionId ?? "");
    var opp = match.GetOpponent(connectionId ?? "");

    <div class="board">
        @if (opp is not null)
        {
            <div class="player player-top">
                <div class="hand">
                    <h5>Opponent Hand</h5>
                    <div class="hand-cards">
                        @for (int i = 0; i < opp.Hand.Count; i++)
                        {
                            <div class="card">(hidden)</div>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="deck">Deck (@opp.Deck.Count)</div>
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = opp.FieldSpellTraps.ElementAtOrDefault(i);
                        <div class="slot spelltrap">@((c == null) ? "(empty)" : (c.IsFaceDown ? "(face down)" : c.Name))</div>
                    }
                </div>
                <div class="row">
                    <div class="graveyard">GY (@opp.Graveyard.Count)</div>
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = opp.FieldMonsters.ElementAtOrDefault(i);
                        <div class="slot monster">@((c == null) ? "(empty)" : (c.IsFaceDown ? "(face down)" : c.Name))</div>
                    }
                    <div class="field-magic">@((opp.FieldMagic == null) ? "(empty)" : (opp.FieldMagic.IsFaceDown ? "(face down)" : opp.FieldMagic.Name))</div>
                </div>
                <div class="player-info opp"><strong>@opp.Name</strong> — LP: @opp.LifePoints</div>
            </div>
        }

        @if (self is not null)
        {
            <div class="player player-bottom">
                <div class="player-info me"><strong>@self.Name</strong> — LP: @self.LifePoints</div>

                <div class="row">
                    <div class="field-magic">@((self.FieldMagic == null) ? "(empty)" : self.FieldMagic.Name)</div>
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = self.FieldMonsters.ElementAtOrDefault(i);
                        <div class="slot monster">@((c == null) ? "(empty)" : c.Name)</div>
                    }
                    <div class="graveyard">GY (@self.Graveyard.Count)</div>
                </div>
                <div class="row">
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = self.FieldSpellTraps.ElementAtOrDefault(i);
                        <div class="slot spelltrap">@((c == null) ? "(empty)" : c.Name)</div>
                    }
                    <div class="deck">
                        Deck (@self.Deck.Count)
                        <div class="draw-box">
                            <form method="post" target="silent" action="@($"/battle/{Code}/draw")">
                                <input type="hidden" name="userId" value="@App.UserId" />
                                <button type="submit">Draw 1</button>
                            </form>
                        </div>
                    </div>
                </div>

                <div class="hand">
                    <h5>Your Hand</h5>
                    <div class="hand-cards">
                        @foreach (var c in self.Hand)
                        {
                            <div class="card">@c.Name</div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter] public string? Code { get; set; }

    private HubConnection? hub;
    private string? connectionId;
    private RuntimeMatch? match;
    private List<DeckOption>? deckOptions;
    private bool joined;

    private sealed class DeckOption
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public int Total { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (string.IsNullOrWhiteSpace(Code))
            Code = query["code"];

        hub = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        hub.On<string>("SetConnectionId", id => connectionId = id);
        hub.On<RuntimeMatch>("UpdateMatch", async m => { match = m; await InvokeAsync(StateHasChanged); });

        await hub.StartAsync();

        if (!string.IsNullOrWhiteSpace(Code))
        {
            await hub.InvokeAsync("JoinGroup", Code);
            await hub.InvokeAsync("RequestSync", Code);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!joined && hub != null && !string.IsNullOrWhiteSpace(Code) && App.UserId != Guid.Empty)
        {
            await hub.InvokeAsync("JoinBattle", Code, App.Nickname, App.UserId);
            await hub.InvokeAsync("RequestSync", Code);
            joined = true;

            if (deckOptions == null)
            {
                var decks = await DecksSvc.GetUserDecksAsync(App.UserId);
                deckOptions = decks?
                    .Select(d => new DeckOption
                    {
                        Id = d.Id,
                        Name = d.Name,
                        Total = d.Cards?.Sum(c => c.Count) ?? 0
                    })
                    .ToList() ?? new List<DeckOption>();
                StateHasChanged();
            }
        }
    }
}
