@page "/battle/{Code?}"
@page "/battle"
@using System
@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.SignalR.Client
@using YuGiOh_Unrestricted.Core.Models
@inject NavigationManager Nav
@inject AppState App
@inject IDeckService DecksSvc

<h3>Battle: @Code</h3>

<iframe name="silent" style="display:none;"></iframe>

@if (isPlacing && match is not null && selectedForPlace is not null)
{
    <div class="placing-bar">
        <div>Placing: <strong>@selectedForPlace.Name</strong></div>
        <div>Face: @(placeFaceDown ? "Down" : "Up") • Position: @(placeDefense ? "Defense" : "Attack")</div>
        <form method="get" action="@($"/battle/{Code}")">
            <button type="submit" class="btn">Cancel</button>
        </form>
    </div>
}

@if (match is null)
{
    <div class="join-container">
        <p>Waiting for server...</p>
    </div>
}

@if (match is not null && !match.Started)
{
    var self = match.GetByConn(connectionId ?? "");

    <hr />
    <h4>Select your deck</h4>

    @if (deckOptions is null)
    {
        <p>Loading decks...</p>
    }
    else if (deckOptions.Count == 0)
    {
        <p>No decks found. <a href="/decks">Go to Decks</a></p>
    }
    else
    {
        <div class="deck-choices">
            @foreach (var d in deckOptions)
            {
                <form method="post" target="silent" action="@($"/battle/{Code}/select-deck")">
                    <input type="hidden" name="deckId" value="@d.Id" />
                    <input type="hidden" name="userId" value="@App.UserId" />
                    <button type="submit" class="btn @((self?.IsReady ?? false) || d.Total < 1 ? "disabled" : null)">@d.Name (@d.Total)</button>
                </form>
            }
        </div>
        <div style="margin-top:8px;">
            <form method="post" target="silent" action="@($"/battle/{Code}/ready")">
                <input type="hidden" name="userId" value="@App.UserId" />
                <button type="submit" class="btn" disabled="@(self == null || ((self?.Deck.Count ?? 0) < 1) || self.IsReady)">@((self?.IsReady ?? false) ? "Waiting..." : "Ready")</button>
            </form>
        </div>
        <div class="ready-hint">
            <span>You: @(((self?.IsReady ?? false) ? "Ready" : "Not ready"))</span>
            @if (match.Players.Count == 2)
            {
                var oppReady = match.GetOpponent(connectionId ?? "")?.IsReady ?? false;
                <span> • Opponent: @(oppReady ? "Ready" : "Not ready")</span>
            }
        </div>
    }
}

@if (match is not null && match.Started)
{
    var self = match.GetByConn(connectionId ?? "");
    var opp = match.GetOpponent(connectionId ?? "");

    <div class="board">
        @if (opp is not null)
        {
            <div class="player player-top">
                <div class="player-info opp">
                    <strong>@opp.Name</strong> — LP: @opp.LifePoints
                </div>

                <div class="hand">
                    <h5>Opponent Hand</h5>
                    <div class="hand-cards">
                        @foreach (var hc in opp.Hand)
                        {
                            var canOpen = !hc.IsFaceDown && hc.IsRevealed && !string.IsNullOrWhiteSpace(hc.ImageUrl);
                            if (canOpen)
                            {
                                <form method="get" action="@($"/battle/{Code}")">
                                    <input type="hidden" name="details" value="@hc.Id" />
                                    <button type="submit" class="card-btn">
                                        <img class="card-img @(hc.IsDefense ? "defense" : null)" src="@hc.ImageUrl" alt="@hc.Name" />
                                    </button>
                                </form>
                            }
                            else
                            {
                                <img class="card-img @(hc.IsDefense ? "defense" : null)" src="@cardBack" alt="Card back" />
                            }
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="deck">
                        <form method="get" action="@($"/battle/{Code}")">
                            <input type="hidden" name="oppdeck" value="1" />
                            <button type="submit" class="btn">Deck (@opp.Deck.Count)</button>
                        </form>
                    </div>
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = opp.FieldSpellTraps.ElementAtOrDefault(i);
                        <div class="slot spelltrap">
                            @if (isPlacing)
                            {
                                <form method="post" action="@($"/battle/{Code}/move")">
                                    <input type="hidden" name="cardId" value="@placeCardId" />
                                    <input type="hidden" name="targetUserId" value="@oppUserId" />
                                    <input type="hidden" name="zone" value="FieldSpellTrap" />
                                    <input type="hidden" name="index" value="@i" />
                                    <input type="hidden" name="deckPos" value="Top" />
                                    <input type="hidden" name="faceDown" value="@placeFaceDown.ToString().ToLower()" />
                                    <input type="hidden" name="defense" value="@placeDefense.ToString().ToLower()" />
                                    <input type="hidden" name="placeFlow" value="1" />
                                    <button type="submit" class="btn">Place @(i + 1)</button>
                                </form>
                            }
                            @if (c is not null)
                            {
                                var canOpen = !c.IsFaceDown && (c.IsRevealed || true);
                                if (canOpen)
                                {
                                    <form method="get" action="@($"/battle/{Code}")">
                                        <input type="hidden" name="details" value="@c.Id" />
                                        <button type="submit" class="card-btn">
                                            <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@(string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@cardBack" alt="Card back" />
                                }
                            }
                        </div>
                    }
                </div>
                <div class="row">
                    <div class="graveyard">
                        <form method="get" action="@($"/battle/{Code}")">
                            <input type="hidden" name="gy" value="opp" />
                            <button type="submit" class="btn">GY (@opp.Graveyard.Count)</button>
                        </form>
                    </div>
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = opp.FieldMonsters.ElementAtOrDefault(i);
                        <div class="slot monster">
                            @if (isPlacing)
                            {
                                <form method="post" action="@($"/battle/{Code}/move")">
                                    <input type="hidden" name="cardId" value="@placeCardId" />
                                    <input type="hidden" name="targetUserId" value="@oppUserId" />
                                    <input type="hidden" name="zone" value="FieldMonster" />
                                    <input type="hidden" name="index" value="@i" />
                                    <input type="hidden" name="deckPos" value="Top" />
                                    <input type="hidden" name="faceDown" value="@placeFaceDown.ToString().ToLower()" />
                                    <input type="hidden" name="defense" value="@placeDefense.ToString().ToLower()" />
                                    <input type="hidden" name="placeFlow" value="1" />
                                    <button type="submit" class="btn">Place @(i + 1)</button>
                                </form>
                            }
                            @if (c is not null)
                            {
                                var canOpen = !c.IsFaceDown && (c.IsRevealed || true);
                                if (canOpen)
                                {
                                    <form method="get" action="@($"/battle/{Code}")">
                                        <input type="hidden" name="details" value="@c.Id" />
                                        <button type="submit" class="card-btn">
                                            <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@(string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@cardBack" alt="Card back" />
                                }
                            }
                        </div>
                    }
                    <div class="field-magic">
                        @if (isPlacing)
                        {
                            <form method="post" action="@($"/battle/{Code}/move")">
                                <input type="hidden" name="cardId" value="@placeCardId" />
                                <input type="hidden" name="targetUserId" value="@oppUserId" />
                                <input type="hidden" name="zone" value="FieldMagic" />
                                <input type="hidden" name="index" value="0" />
                                <input type="hidden" name="deckPos" value="Top" />
                                <input type="hidden" name="faceDown" value="@placeFaceDown.ToString().ToLower()" />
                                <input type="hidden" name="defense" value="@placeDefense.ToString().ToLower()" />
                                <input type="hidden" name="placeFlow" value="1" />
                                <button type="submit" class="btn">Place</button>
                            </form>
                        }
                        @if (opp.FieldMagic is null)
                        {
                            <div>Field</div>
                        }
                        else
                        {
                            var c = opp.FieldMagic;
                            var canOpen = !c.IsFaceDown && (c.IsRevealed || true);
                            if (canOpen)
                            {
                                <form method="get" action="@($"/battle/{Code}")">
                                    <input type="hidden" name="details" value="@c.Id" />
                                    <button type="submit" class="card-btn">
                                        <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@(string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                                    </button>
                                </form>
                            }
                            else
                            {
                                <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@cardBack" alt="Card back" />
                            }
                        }
                    </div>
                </div>
            </div>
        }

        @if (self is not null)
        {
            <div class="player player-bottom">
                <div class="player-info me">
                    <strong>@self.Name</strong>
                    <form method="post" target="silent" action="@($"/battle/{Code}/lp")" style="display:inline-flex; gap:6px; align-items:center; margin-left:8px;">
                        <input type="hidden" name="targetUserId" value="@selfUserId" />
                        <input type="number" name="delta" step="1" value="0" style="width:90px;" />
                        <button type="submit" class="btn">Apply</button>
                    </form>
                    <span style="margin-left:8px;">LP: @self.LifePoints</span>
                    <form method="post" target="silent" action="@($"/battle/{Code}/coin")" style="display:inline-block; margin-left:8px;">
                        <input type="hidden" name="userId" value="@selfUserId" />
                        <button type="submit" class="btn">Moeda</button>
                    </form>
                    <form method="post" target="silent" action="@($"/battle/{Code}/dice")" style="display:inline-block; margin-left:6px;">
                        <input type="hidden" name="userId" value="@selfUserId" />
                        <button type="submit" class="btn">Dado</button>
                    </form>
                    <span style="margin-left:6px;">@self.LastCoin @((string.IsNullOrWhiteSpace(self.LastDice) ? "" : $"• {self.LastDice}"))</span>
                </div>

                <div class="row">
                    <div class="field-magic">
                        @if (isPlacing)
                        {
                            <form method="post" action="@($"/battle/{Code}/move")">
                                <input type="hidden" name="cardId" value="@placeCardId" />
                                <input type="hidden" name="targetUserId" value="@selfUserId" />
                                <input type="hidden" name="zone" value="FieldMagic" />
                                <input type="hidden" name="index" value="0" />
                                <input type="hidden" name="deckPos" value="Top" />
                                <input type="hidden" name="faceDown" value="@placeFaceDown.ToString().ToLower()" />
                                <input type="hidden" name="defense" value="@placeDefense.ToString().ToLower()" />
                                <input type="hidden" name="placeFlow" value="1" />
                                <button type="submit" class="btn">Place</button>
                            </form>
                        }
                        @if (self.FieldMagic is null)
                        {
                            <div>Field</div>
                        }
                        else
                        {
                            var c = self.FieldMagic;
                            <form method="get" action="@($"/battle/{Code}")">
                                <input type="hidden" name="details" value="@c.Id" />
                                <button type="submit" class="card-btn">
                                    <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@(c.IsFaceDown || string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                                </button>
                            </form>
                        }
                    </div>
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = self.FieldMonsters.ElementAtOrDefault(i);
                        <div class="slot monster">
                            @if (isPlacing)
                            {
                                <form method="post" action="@($"/battle/{Code}/move")">
                                    <input type="hidden" name="cardId" value="@placeCardId" />
                                    <input type="hidden" name="targetUserId" value="@selfUserId" />
                                    <input type="hidden" name="zone" value="FieldMonster" />
                                    <input type="hidden" name="index" value="@i" />
                                    <input type="hidden" name="deckPos" value="Top" />
                                    <input type="hidden" name="faceDown" value="@placeFaceDown.ToString().ToLower()" />
                                    <input type="hidden" name="defense" value="@placeDefense.ToString().ToLower()" />
                                    <input type="hidden" name="placeFlow" value="1" />
                                    <button type="submit" class="btn">Place @(i + 1)</button>
                                </form>
                            }
                            @if (c is not null)
                            {
                                <form method="get" action="@($"/battle/{Code}")">
                                    <input type="hidden" name="details" value="@c.Id" />
                                    <button type="submit" class="card-btn">
                                        <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@(c.IsFaceDown || string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                                    </button>
                                </form>
                            }
                        </div>
                    }
                    <div class="graveyard">
                        <form method="get" action="@($"/battle/{Code}")">
                            <input type="hidden" name="gy" value="self" />
                            <button type="submit" class="btn">GY (@self.Graveyard.Count)</button>
                        </form>
                    </div>
                </div>
                <div class="row">
                    @for (int i = 0; i < 5; i++)
                    {
                        var c = self.FieldSpellTraps.ElementAtOrDefault(i);
                        <div class="slot spelltrap">
                            @if (isPlacing)
                            {
                                <form method="post" action="@($"/battle/{Code}/move")">
                                    <input type="hidden" name="cardId" value="@placeCardId" />
                                    <input type="hidden" name="targetUserId" value="@selfUserId" />
                                    <input type="hidden" name="zone" value="FieldSpellTrap" />
                                    <input type="hidden" name="index" value="@i" />
                                    <input type="hidden" name="deckPos" value="Top" />
                                    <input type="hidden" name="faceDown" value="@placeFaceDown.ToString().ToLower()" />
                                    <input type="hidden" name="defense" value="@placeDefense.ToString().ToLower()" />
                                    <input type="hidden" name="placeFlow" value="1" />
                                    <button type="submit" class="btn">Place @(i + 1)</button>
                                </form>
                            }
                            @if (c is not null)
                            {
                                <form method="get" action="@($"/battle/{Code}")">
                                    <input type="hidden" name="details" value="@c.Id" />
                                    <button type="submit" class="card-btn">
                                        <img class="slot-img @(c.IsDefense ? "defense" : null)" src="@(c.IsFaceDown || string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                                    </button>
                                </form>
                            }
                        </div>
                    }
                    <div class="deck">
                        <form method="get" action="@($"/battle/{Code}")">
                            <input type="hidden" name="deck" value="self" />
                            <button type="submit" class="btn">Deck (@self.Deck.Count)</button>
                        </form>
                        <div class="draw-box">
                            <form method="post" target="silent" action="@($"/battle/{Code}/draw")">
                                <input type="hidden" name="userId" value="@App.UserId" />
                                <button type="submit" class="btn">Draw 1</button>
                            </form>
                        </div>
                    </div>
                </div>

                <div class="hand">
                    <h5>Your Hand</h5>
                    <div class="hand-cards">
                        @foreach (var c in self.Hand)
                        {
                            <form method="get" action="@($"/battle/{Code}")">
                                <input type="hidden" name="details" value="@c.Id" />
                                <button type="submit" class="card-btn">
                                    <img class="card-img @(c.IsDefense ? "defense" : null)" src="@(string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (!string.IsNullOrWhiteSpace(gyScope) && gyCards is not null)
{
    <dialog open class="modal">
        <div class="modal-header">
            <strong>@(gyScope == "self" ? "Your Graveyard" : "Opponent Graveyard")</strong>
        </div>
        <div class="modal-body">
            <div class="cards-row">
                @foreach (var c in gyCards)
                {
                    var canOpen = gyScope == "self" || (!c.IsFaceDown && c.IsRevealed);
                    if (canOpen)
                    {
                        <form method="get" action="@($"/battle/{Code}")">
                            <input type="hidden" name="details" value="@c.Id" />
                            <button type="submit" class="card-btn">
                                <img class="card-img" src="@(string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                            </button>
                        </form>
                    }
                    else
                    {
                        <img class="card-img" src="@cardBack" alt="Card back" />
                    }
                }
            </div>
            <div class="modal-actions">
                <form method="get" action="@($"/battle/{Code}")">
                    <button type="submit" class="btn">Close</button>
                </form>
            </div>
        </div>
    </dialog>
}

@if (!string.IsNullOrWhiteSpace(deckScope) && deckCards is not null)
{
    <dialog open class="modal">
        <div class="modal-header">
            <strong>Your Deck</strong>
        </div>
        <div class="modal-body">
            <div class="cards-row">
                @foreach (var c in deckCards)
                {
                    <form method="get" action="@($"/battle/{Code}")">
                        <input type="hidden" name="details" value="@c.Id" />
                        <button type="submit" class="card-btn">
                            <img class="card-img" src="@(string.IsNullOrWhiteSpace(c.ImageUrl) ? cardBack : c.ImageUrl)" alt="@c.Name" title="@c.Name" />
                        </button>
                    </form>
                }
            </div>
            <div class="modal-actions">
                <form method="get" action="@($"/battle/{Code}")">
                    <button type="submit" class="btn">Close</button>
                </form>
            </div>
        </div>
    </dialog>
}

@if (!string.IsNullOrWhiteSpace(detailsId) && selected is not null)
{
    <dialog open class="modal">
        <div class="modal-body">
            <div class="modal-main-col">
                <img src="@(string.IsNullOrWhiteSpace(selected.ImageUrl) ? cardBack : selected.ImageUrl)" alt="@selected.Name" class="modal-card" />
                <div class="modal-info-col">
                    <div class="info-title">@selected.Name</div>
                    @if (selected.Level.HasValue && selected.Level.Value > 0)
                    {
                        <div class="info-row">Level: @selected.Level</div>
                    }
                    <div class="info-row">
                        @if (selected.Attack.HasValue && selected.Attack.Value > 0)
                        {
                            <span>ATK: @selected.Attack</span>
                        }
                        @if (selected.Defense.HasValue && selected.Defense.Value > 0)
                        {
                            <span style="margin-left:12px;">DEF: @selected.Defense</span>
                        }
                    </div>
                    <div class="modal-desc">@selected.Description</div>
                </div>
            </div>

            <div class="options-grid">
                <form method="get" action="@($"/battle/{Code}")" class="opt-span-2">
                    <input type="hidden" name="details" value="@selected.Id" />
                    <label>
                        Face
                        <select name="faceDown">
                            <option value="false" selected>Up</option>
                            <option value="true">Down</option>
                        </select>
                    </label>
                    <label>
                        Position
                        <select name="defense">
                            <option value="false" selected>Attack</option>
                            <option value="true">Defense</option>
                        </select>
                    </label>
                    <button type="submit" name="place" value="@selected.Id" class="btn">Confirm & choose slot</button>
                </form>

                <form method="post" action="@($"/battle/{Code}/move")" class="opt-full">
                    <input type="hidden" name="cardId" value="@selected.Id" />
                    <input type="hidden" name="targetUserId" value="@selfUserId" />
                    <input type="hidden" name="zone" value="Graveyard" />
                    <input type="hidden" name="index" value="0" />
                    <input type="hidden" name="deckPos" value="Top" />
                    <input type="hidden" name="returnTo" value="@($"/battle/{Code}")" />
                    <button type="submit" class="btn">Send to Graveyard</button>
                </form>

                <form method="post" action="@($"/battle/{Code}/move")">
                    <input type="hidden" name="cardId" value="@selected.Id" />
                    <input type="hidden" name="targetUserId" value="@selfUserId" />
                    <input type="hidden" name="zone" value="Hand" />
                    <input type="hidden" name="index" value="0" />
                    <input type="hidden" name="deckPos" value="Top" />
                    <input type="hidden" name="returnTo" value="@($"/battle/{Code}")" />
                    <button type="submit" class="btn">Move to my hand</button>
                </form>

                @if (oppUserId != Guid.Empty)
                {
                    <form method="post" action="@($"/battle/{Code}/move")">
                        <input type="hidden" name="cardId" value="@selected.Id" />
                        <input type="hidden" name="targetUserId" value="@oppUserId" />
                        <input type="hidden" name="zone" value="Hand" />
                        <input type="hidden" name="index" value="0" />
                        <input type="hidden" name="deckPos" value="Top" />
                        <input type="hidden" name="returnTo" value="@($"/battle/{Code}")" />
                        <button type="submit" class="btn">Move to opponent hand</button>
                    </form>
                }

                <form method="post" action="@($"/battle/{Code}/reveal")">
                    <input type="hidden" name="cardId" value="@selected.Id" />
                    <input type="hidden" name="reveal" value="true" />
                    <input type="hidden" name="returnTo" value="@($"/battle/{Code}")" />
                    <button type="submit" class="btn">Reveal to opponent</button>
                </form>

                <form method="post" action="@($"/battle/{Code}/reveal")">
                    <input type="hidden" name="cardId" value="@selected.Id" />
                    <input type="hidden" name="reveal" value="false" />
                    <input type="hidden" name="returnTo" value="@($"/battle/{Code}")" />
                    <button type="submit" class="btn">Hide from opponent</button>
                </form>

                <form method="get" action="@($"/battle/{Code}")" class="opt-full">
                    <button type="submit" class="btn">Close</button>
                </form>
            </div>
        </div>
    </dialog>
}

@code {
    [Parameter] public string? Code { get; set; }

    private HubConnection? hub;
    private string? connectionId;
    private RuntimeMatch? match;
    private List<DeckOption>? deckOptions;
    private bool joined;
    private string cardBack = "/img/card-back.jpg";

    private string? detailsId;
    private RuntimeCard? selected;

    private string? placeCardId;
    private bool placeFaceDown;
    private bool placeDefense;
    private bool isPlacing => !string.IsNullOrWhiteSpace(placeCardId);
    private RuntimeCard? selectedForPlace;

    private string? gyScope;
    private List<RuntimeCard>? gyCards;

    private string? deckScope;
    private List<RuntimeCard>? deckCards;

    private Guid selfUserId => match?.GetByConn(connectionId ?? "")?.UserId ?? Guid.Empty;
    private Guid oppUserId => match?.GetOpponent(connectionId ?? "")?.UserId ?? Guid.Empty;

    private sealed class DeckOption
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public int Total { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (string.IsNullOrWhiteSpace(Code))
            Code = query["code"];
        detailsId = query["details"];
        placeCardId = query["place"];
        bool.TryParse(query["faceDown"], out placeFaceDown);
        bool.TryParse(query["defense"], out placeDefense);

        gyScope = query["gy"];
        deckScope = query["deck"];

        hub = new HubConnectionBuilder()
            .WithUrl(Nav.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        hub.On<string>("SetConnectionId", id => connectionId = id);
        hub.On<RuntimeMatch>("UpdateMatch", async m =>
        {
            match = m;
            TryBindSelected();
            TryBindPlaceSelected();
            if (!string.IsNullOrWhiteSpace(gyScope)) BindGyCards();
            if (!string.IsNullOrWhiteSpace(deckScope)) BindDeckCards();
            await InvokeAsync(StateHasChanged);
        });

        await hub.StartAsync();

        if (!string.IsNullOrWhiteSpace(Code))
        {
            await hub.InvokeAsync("JoinGroup", Code);
            await hub.InvokeAsync("RequestSync", Code);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!joined && hub != null && !string.IsNullOrWhiteSpace(Code) && App.UserId != Guid.Empty)
        {
            await hub.InvokeAsync("JoinBattle", Code, App.Nickname, App.UserId);
            await hub.InvokeAsync("RequestSync", Code);
            joined = true;

            if (deckOptions == null)
            {
                var decks = await DecksSvc.GetUserDecksAsync(App.UserId);
                deckOptions = decks?
                    .Select(d => new DeckOption
                    {
                        Id = d.Id,
                        Name = d.Name,
                        Total = d.Cards?.Sum(c => c.Count) ?? 0
                    })
                    .ToList() ?? new List<DeckOption>();
                StateHasChanged();
            }
        }
    }

    private void TryBindSelected()
    {
        selected = null;
        if (match == null || string.IsNullOrWhiteSpace(detailsId)) return;
        selected = FindById(detailsId);
    }

    private void TryBindPlaceSelected()
    {
        selectedForPlace = null;
        if (match == null || string.IsNullOrWhiteSpace(placeCardId)) return;
        selectedForPlace = FindById(placeCardId);
    }

    private void BindGyCards()
    {
        gyCards = null;
        if (match == null || string.IsNullOrWhiteSpace(gyScope)) return;
        var self = match.GetByConn(connectionId ?? "");
        var opp = match.GetOpponent(connectionId ?? "");
        if (gyScope == "self") gyCards = self?.Graveyard?.ToList() ?? new List<RuntimeCard>();
        else if (gyScope == "opp") gyCards = opp?.Graveyard?.ToList() ?? new List<RuntimeCard>();
    }

    private void BindDeckCards()
    {
        deckCards = null;
        if (match == null || string.IsNullOrWhiteSpace(deckScope)) return;
        var self = match.GetByConn(connectionId ?? "");
        if (deckScope == "self") deckCards = self?.Deck?.ToList() ?? new List<RuntimeCard>();
    }

    private RuntimeCard? FindById(string id)
    {
        foreach (var p in match!.Players)
        {
            var h = p.Hand.FirstOrDefault(x => x.Id == id);
            if (h != null) return h;

            var d = p.Deck.FirstOrDefault(x => x.Id == id);
            if (d != null) return d;

            var g = p.Graveyard.FirstOrDefault(x => x.Id == id);
            if (g != null) return g;

            for (int i = 0; i < p.FieldMonsters.Count; i++)
                if (p.FieldMonsters[i]?.Id == id) return p.FieldMonsters[i];

            for (int i = 0; i < p.FieldSpellTraps.Count; i++)
                if (p.FieldSpellTraps[i]?.Id == id) return p.FieldSpellTraps[i];

            if (p.FieldMagic?.Id == id) return p.FieldMagic;
        }
        return null;
    }
}
